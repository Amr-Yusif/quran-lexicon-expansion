#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ุตูุญุฉ ุงููุชุจ ูุงููุฑุงุฌุน ุงูุฅุณูุงููุฉ
"""

import streamlit as st
import sys
import os

# ุฅุถุงูุฉ ุงููุณุงุฑ ุงูุฑุฆูุณู ูููุดุฑูุน ุฅูู ูุณุงุฑ ุงูุจุญุซ
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../..")))


def render(embedding_model_loader, qdrant_manager_loader):
    """ุนุฑุถ ุตูุญุฉ ุงููุชุจ ูุงููุฑุงุฌุน ุงูุฅุณูุงููุฉ"""
    st.header("๐ ุงููุชุจ ูุงููุฑุงุฌุน ุงูุฅุณูุงููุฉ")
    
    # ุชูุณูู ุงูุดุงุดุฉ ุฅูู ุนููุฏูู
    col1, col2 = st.columns([1, 2])
    
    with col1:
        # ุงุฎุชูุงุฑ ููุน ุงููุตุฏุฑ ููุจุญุซ
        source_type = st.radio(
            "ููุน ุงููุตุฏุฑ:",
            ["ุชูุงุณูุฑ ุงููุฑุขู", "ูุชุจ ุงูุนููุงุก", "ุงููุนุฌุฒุงุช ุงูุนูููุฉ", "ุฌููุน ุงููุตุงุฏุฑ"],
            index=3
        )
        
        # ูุฑุจุน ุงูุจุญุซ
        islamic_search_query = st.text_input("ุฃุฏุฎู ูุต ุงูุจุญุซ:", key="islamic_resources_search")
        
        # ุฒุฑ ุงูุจุญุซ
        search_clicked = st.button("ุจุญุซ ูู ุงููุตุงุฏุฑ ุงูุฅุณูุงููุฉ", key="islamic_search_button")
        
        # ุฅุนุฏุงุฏุงุช ูุชูุฏูุฉ ูุน ุฎูุงุฑ ุทู/ูุชุญ
        with st.expander("ุฅุนุฏุงุฏุงุช ุงูุจุญุซ ุงููุชูุฏูุฉ"):
            max_results = st.slider("ุนุฏุฏ ุงููุชุงุฆุฌ ุงูุฃูุตู:", min_value=5, max_value=50, value=10)
            similarity_threshold = st.slider("ุนุชุจุฉ ุงูุชุดุงุจู:", min_value=0.5, max_value=0.99, value=0.75, step=0.01)
            
            # ููุชุฑุฉ ุญุณุจ ุงููุคูู/ุงููุตุฏุฑ (ุฏููุงููููุฉ ุญุณุจ ููุน ุงููุตุฏุฑ)
            if source_type == "ุชูุงุณูุฑ ุงููุฑุขู":
                tafsir_options = ["ุงูุดุนุฑุงูู", "ุงููุงุจูุณู", "ุฌููุน ุงูุชูุงุณูุฑ"]
                selected_author = st.multiselect("ุงุฎุชุฑ ุงูุชูุณูุฑ:", tafsir_options, default=["ุฌููุน ุงูุชูุงุณูุฑ"])
            elif source_type == "ูุชุจ ุงูุนููุงุก":
                scholar_options = ["ุงุจู ุงูููู", "ุงุจู ุชูููุฉ", "ุงูุฃุฆูุฉ ุงูุฃุฑุจุนุฉ", "ุงููุงุจูุณู", "ุงูุดุนุฑุงูู", "ูุตุทูู ูุญููุฏ", "ุฑุงุบุจ ุงูุณุฑุฌุงูู", "ุฌููุน ุงูุนููุงุก"]
                selected_author = st.multiselect("ุงุฎุชุฑ ุงูุนุงูู:", scholar_options, default=["ุฌููุน ุงูุนููุงุก"])
            elif source_type == "ุงููุนุฌุฒุงุช ุงูุนูููุฉ":
                miracle_options = ["ุงูุฅุนุฌุงุฒ ุงูุนููู", "ุงูุฅุนุฌุงุฒ ุงูุนุฏุฏู", "ุงูุฅุนุฌุงุฒ ุงููุบูู", "ุฌููุน ุฃููุงุน ุงูุฅุนุฌุงุฒ"]
                selected_author = st.multiselect("ููุน ุงูุฅุนุฌุงุฒ:", miracle_options, default=["ุฌููุน ุฃููุงุน ุงูุฅุนุฌุงุฒ"])
    
    with col2:
        # ููุทูุฉ ุนุฑุถ ุงููุชุงุฆุฌ
        if search_clicked and islamic_search_query:
            with st.spinner("ุฌุงุฑู ุงูุจุญุซ ูู ุงููุตุงุฏุฑ ุงูุฅุณูุงููุฉ..."):
                try:
                    # ุชููุฆุฉ ุงูุนูุงุตุฑ ุงููุทููุจุฉ
                    embedding_model = embedding_model_loader()
                    qdrant_manager = qdrant_manager_loader()
                    
                    # ุชุญุฏูุฏ ุงููุฌููุนุงุช ุงูุชู ุณูุชู ุงูุจุญุซ ูููุง
                    collections_to_search = []
                    if source_type == "ุชูุงุณูุฑ ุงููุฑุขู" or source_type == "ุฌููุน ุงููุตุงุฏุฑ":
                        collections_to_search.append("tafsir_explanations")
                    if source_type == "ูุชุจ ุงูุนููุงุก" or source_type == "ุฌููุน ุงููุตุงุฏุฑ":
                        collections_to_search.append("scholars_books")
                    if source_type == "ุงููุนุฌุฒุงุช ุงูุนูููุฉ" or source_type == "ุฌููุน ุงููุตุงุฏุฑ":
                        collections_to_search.append("scientific_miracles")
                    
                    # ุชุญููู ูุต ุงูุจุญุซ ุฅูู ุชุถููู (embedding)
                    query_embedding = embedding_model.encode(islamic_search_query)
                    
                    # ุฌูุน ุงููุชุงุฆุฌ ูู ุฌููุน ุงููุฌููุนุงุช ุงููุทููุจุฉ
                    all_results = []
                    
                    for collection_name in collections_to_search:
                        try:
                            results = qdrant_manager.search(
                                collection_name=collection_name,
                                query_vector=query_embedding.tolist(),
                                limit=max_results,
                                score_threshold=similarity_threshold # ุชุนุฏูู ููุง ูุงุถุงูุฉ  threshold
                            )
                            
                            # ุฅุถุงูุฉ ุงููุฌููุนุฉ ุฅูู ูู ูุชูุฌุฉ ููุชูููุฒ ูุงุญููุง
                            for result in results:
                                result.payload["collection"] = collection_name
                                all_results.append(result)
                                
                        except Exception as e:
                            st.warning(f"ุชุนุฐุฑ ุงูุจุญุซ ูู ูุฌููุนุฉ {collection_name}: {str(e)}")
                    
                    # ุชุฑุชูุจ ุงููุชุงุฆุฌ ุญุณุจ ุฏุฑุฌุฉ ุงูุชุดุงุจู
                    all_results.sort(key=lambda x: x.score, reverse=True)
                    
                    # ุนุฑุถ ุงููุชุงุฆุฌ
                    if all_results:
                        st.subheader(f"ุชู ุงูุนุซูุฑ ุนูู {len(all_results)} ูุชูุฌุฉ:")
                        
                        for i, result in enumerate(all_results, 1):
                            # ุชุญุฏูุฏ ููุน ุงููุตุฏุฑ ููุนุฑุถ
                            source_icon = "๐"
                            if result.payload.get("collection") == "tafsir_explanations":
                                source_icon = "๐"
                                source_type_display = "ุชูุณูุฑ"
                                author_display = result.payload.get("tafsir_name", "ุบูุฑ ูุนุฑูู")
                            elif result.payload.get("collection") == "scholars_books":
                                source_icon = "๐จโ๐ซ"
                                source_type_display = "ูุชุงุจ"
                                author_display = result.payload.get("scholar_name", "ุบูุฑ ูุนุฑูู")
                            elif result.payload.get("collection") == "scientific_miracles":
                                source_icon = "๐ฌ"
                                source_type_display = "ูุนุฌุฒุฉ ุนูููุฉ"
                                author_display = result.payload.get("category", "ุบูุฑ ูุนุฑูู")
                            else:
                                source_type_display = "ูุตุฏุฑ"
                                author_display = "ุบูุฑ ูุนุฑูู"
                            
                            # ุนุฑุถ ุงููุชูุฌุฉ ูู ุจุทุงูุฉ
                            with st.container():
                                st.markdown(f"### {i}. {source_icon} {source_type_display}: {author_display}")
                                st.markdown(f"**ุงููุต**: {result.payload.get('text', 'ูุง ููุฌุฏ ูุต')}")
                                st.markdown(f"**ุงููุตุฏุฑ**: {result.payload.get('source', 'ุบูุฑ ูุนุฑูู')}")
                                st.markdown(f"**ุฏุฑุฌุฉ ุงูุชุทุงุจู**: {result.score:.2f}")
                                st.divider()
                    else:
                        st.warning("ูู ูุชู ุงูุนุซูุฑ ุนูู ูุชุงุฆุฌ. ุญุงูู ุชุนุฏูู ูุนุงููุฑ ุงูุจุญุซ ุฃู ุงุณุชุฎุฏุงู ูููุงุช ูุฎุชููุฉ.")
                except Exception as e:
                    st.error(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุจุญุซ: {str(e)}")
        else:
            # ุนุฑุถ ูุญุชูู ุงูุชุฑุงุถู ุนูุฏูุง ูุง ููุฌุฏ ุจุญุซ
            st.info("ุฃุฏุฎู ูุต ุงูุจุญุซ ูุงุถุบุท ุนูู ุฒุฑ 'ุจุญุซ ูู ุงููุตุงุฏุฑ ุงูุฅุณูุงููุฉ' ููุจุฏุก.")
            
            # ุนุฑุถ ุจุนุถ ุงููุตุงุฏุฑ ุงูููุชุฑุญุฉ
            st.subheader("ูุตุงุฏุฑ ููุชุฑุญุฉ")
            
            # ุนุฑุถ ุจุนุถ ุงููุตุงุฏุฑ ุงูููุชุฑุญุฉ ูู ุดูู ุจุทุงูุงุช
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown("### ๐ ุชูุงุณูุฑ ุงููุฑุขู")
                st.markdown("- ุชูุณูุฑ ุงุจู ูุซูุฑ")
                st.markdown("- ุชูุณูุฑ ุงูุทุจุฑู")
                st.markdown("- ุชูุณูุฑ ุงููุฑุทุจู")
                st.markdown("- ุชูุณูุฑ ุงูุดุนุฑุงูู")
            
            with col2:
                st.markdown("### ๐จโ๐ซ ูุชุจ ุงูุนููุงุก")
                st.markdown("- ุฒุงุฏ ุงููุนุงุฏ ูุงุจู ุงูููู")
                st.markdown("- ุฅุญูุงุก ุนููู ุงูุฏูู ููุบุฒุงูู")
                st.markdown("- ููู ุงูุณูุฉ ููุณูุฏ ุณุงุจู")
                st.markdown("- ุงูุฑุญูู ุงููุฎุชูู ูููุจุงุฑูููุฑู")
            
            with col3:
                st.markdown("### ๐ฌ ุงููุนุฌุฒุงุช ุงูุนูููุฉ")
                st.markdown("- ุงูุฅุนุฌุงุฒ ุงูุนููู ูู ุงููุฑุขู ูุงูุณูุฉ")
                st.markdown("- ุงูุฅุดุงุฑุงุช ุงูููููุฉ ูู ุงููุฑุขู")
                st.markdown("- ุงูุฅุนุฌุงุฒ ุงูุนุฏุฏู ูู ุงููุฑุขู")
                st.markdown("- ุงูุฅุนุฌุงุฒ ุงููุบูู ูู ุงููุฑุขู")


if __name__ == "__main__":
    # ูุฐุง ููุงุฎุชุจุงุฑ ุงููุณุชูู ููุท
    render(None, None)