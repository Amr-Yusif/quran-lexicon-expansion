#!/usr/bin/env python3
"""
ูุซุงู ูุงุณุชุฎุฏุงู ุงููุนุงูุฌ ุงููุฌูู ุจุนุฏ ุฏูุฌ ุงูุฎูุงุฑุฒููุงุช.
ููุถุญ ููููุฉ ูุนุงูุฌุฉ ุงููููุงุช ุงููุฑุขููุฉ ูุงููููุงุช ุบูุฑ ุงููุฑุขููุฉ ุจุงุณุชุฎุฏุงู ุงููุธุงู ุงููุฌูู.
"""

import os
import sys
from pathlib import Path
import json

# ุฅุถุงูุฉ ูุณุงุฑ ุงููุดุฑูุน ุฅูู ูุชุบูุฑ ุงููุณุงุฑ
sys.path.append(str(Path(__file__).parent.parent))

from core.lexicon.hybrid_processor import HybridProcessor
from core.nlp.root_extraction import ArabicRootExtractor
from core.nlp.morphology import ArabicMorphologyAnalyzer
from core.nlp.diacritics import DiacriticsProcessor


def print_word_processing_result(result):
    """ุทุจุงุนุฉ ูุชูุฌุฉ ูุนุงูุฌุฉ ูููุฉ ุจุชูุณูู ุฌูุฏ."""
    print(f"\n๐ ูุชูุฌุฉ ูุนุงูุฌุฉ ุงููููุฉ: '{result['word']}'")

    # ุทุจุงุนุฉ ูุนูููุงุช ุงูุฌุฐุฑ
    root = result["root"]
    print(f"  ๐ ุงูุฌุฐุฑ: {root['value'] or 'ุบูุฑ ูุนุฑูู'}")
    print(f"     - ุฏุฑุฌุฉ ุงูุซูุฉ: {root['confidence']:.2f}")
    print(f"     - ุงููุตุฏุฑ: {root['source']}")

    # ุทุจุงุนุฉ ูุนูููุงุช ููุน ุงููููุฉ
    word_type = result["type"]
    print(f"  ๐ ุงูููุน: {word_type['value'] or 'ุบูุฑ ูุนุฑูู'}")
    print(f"     - ุฏุฑุฌุฉ ุงูุซูุฉ: {word_type['confidence']:.2f}")
    print(f"     - ุงููุตุฏุฑ: {word_type['source']}")

    # ุทุจุงุนุฉ ูุนูููุงุช ุงููุฒู ุงูุตุฑูู
    pattern = result["pattern"]
    print(f"  ๐ ุงููุฒู: {pattern['value'] or 'ุบูุฑ ูุนุฑูู'}")
    print(f"     - ุฏุฑุฌุฉ ุงูุซูุฉ: {pattern['confidence']:.2f}")
    print(f"     - ุงููุตุฏุฑ: {pattern['source']}")

    # ุทุจุงุนุฉ ุงููุนูู ุฅุฐุง ูุงู ูุชููุฑูุง
    if "meaning" in result:
        print(f"  ๐ ุงููุนูู: {result['meaning']['value']}")
        print(f"     - ุงููุตุฏุฑ: {result['meaning']['source']}")

    # ุทุจุงุนุฉ ูุนูููุงุช ุฅุถุงููุฉ ุฅุฐุง ูุงูุช ูุชููุฑุฉ
    if "additional_info" in result:
        print(f"  ๐ ูุนูููุงุช ุฅุถุงููุฉ:")
        for key, info in result["additional_info"].items():
            print(f"     - {key}: {info['value']}")
            print(f"       ุงููุตุฏุฑ: {info['source']}")


def print_verification_result(result):
    """ุทุจุงุนุฉ ูุชูุฌุฉ ุงูุชุญูู ูู ุตุญุฉ ุงุณุชุฎุฑุงุฌ ุฌุฐุฑ ูููุฉ."""
    print(f"\n๐ ูุชูุฌุฉ ุงูุชุญูู ูู ุงููููุฉ: '{result['word']}'")
    print(f"  - ุงูุฌุฐุฑ ุงููุชููุน: {result['expected_root']}")
    print(f"  - ุงูุฌุฐุฑ ุงููุณุชุฎุฑุฌ: {result['extracted_root'] or 'ุบูุฑ ูุนุฑูู'}")
    print(f"  - ุฏุฑุฌุฉ ุงูุซูุฉ: {result['confidence']:.2f}")
    print(f"  - ุงููุตุฏุฑ: {result['source']}")

    if result["is_correct"]:
        print("  โ ุงููุชูุฌุฉ: ุตุญูุญุฉ")
    else:
        print("  โ ุงููุชูุฌุฉ: ุฎุงุทุฆุฉ")


def print_expansion_suggestion(suggestion, word):
    """ุทุจุงุนุฉ ุงูุชุฑุงุญ ุชูุณูุน ุงููุนุฌู."""
    print(f"\n๐ ุงูุชุฑุงุญ ุฅุถุงูุฉ ูููุฉ: '{word}'")
    print(f"  - ุงูุฌุฐุฑ ุงูููุชุฑุญ: {suggestion['root']}")
    print(f"  - ุงูููุน ุงูููุชุฑุญ: {suggestion['type']}")
    print(f"  - ุงููุฒู ุงูููุชุฑุญ: {suggestion.get('pattern', 'ุบูุฑ ูุนุฑูู')}")
    print(f"  - ุฏุฑุฌุฉ ุงูุซูุฉ: {suggestion['confidence']:.2f}")
    print(f"  - ุงููุตุฏุฑ: {suggestion['source']}")


def process_quranic_words(processor):
    """ูุนุงูุฌุฉ ูููุงุช ูุฑุขููุฉ ูู ุงููุนุฌู."""
    print("\n=== ูุนุงูุฌุฉ ูููุงุช ูุฑุขููุฉ ===")
    quranic_words = ["ุงููู", "ุงูุฑุญูู", "ูุนุจุฏ", "ุงููุณุชููู"]

    for word in quranic_words:
        result = processor.process_word(word)
        print_word_processing_result(result)


def process_non_quranic_words(processor):
    """ูุนุงูุฌุฉ ูููุงุช ุบูุฑ ูุฑุขููุฉ ุจุงุณุชุฎุฏุงู ุงูุฎูุงุฑุฒููุงุช."""
    print("\n=== ูุนุงูุฌุฉ ูููุงุช ุบูุฑ ูุฑุขููุฉ ===")
    non_quranic_words = ["ููุชุจุฉ", "ุงุณุชุบูุฑ", "ูุณุชุบูุฑูู", "ุฏุฑุงุณุฉ", "ููุชุจูู"]

    for word in non_quranic_words:
        result = processor.process_word(word)
        print_word_processing_result(result)


def verify_roots(processor):
    """ุงูุชุญูู ูู ุตุญุฉ ุงุณุชุฎุฑุงุฌ ุงูุฌุฐูุฑ."""
    print("\n=== ุงูุชุญูู ูู ุตุญุฉ ุงุณุชุฎุฑุงุฌ ุงูุฌุฐูุฑ ===")
    verification_tests = [
        {"word": "ุงููู", "expected_root": "ุฃูู"},
        {"word": "ุงูุฑุญูู", "expected_root": "ุฑุญู"},
        {"word": "ููุชุจุฉ", "expected_root": "ูุชุจ"},
        {"word": "ุงุณุชุบูุฑ", "expected_root": "ุบูุฑ"},
    ]

    for test in verification_tests:
        result = processor.verify_extraction(test["word"], test["expected_root"])
        print_verification_result(result)


def expand_lexicon(processor):
    """ุชูุณูุน ุงููุนุฌู ุจุงุณุชุฎุฏุงู ุงูุฎูุงุฑุฒููุงุช."""
    print("\n=== ุชูุณูุน ุงููุนุฌู ุจุงุณุชุฎุฏุงู ุงูุฎูุงุฑุฒููุงุช ===")
    new_words = ["ููุชุจุฉ", "ุงุณุชุบูุฑ", "ูุฏุฑุณุฉ", "ุฏุฑุงุณุฉ", "ูุชุงุจุฉ", "ูุงุฑุฆ", "ููุฑูุก"]

    result = processor.expand_lexicon(new_words)

    print(f"ุนุฏุฏ ุงููููุงุช ุงููุนุงูุฌุฉ: {result['total_words']}")
    print(f"ุนุฏุฏ ุงูุงูุชุฑุงุญุงุช: {result['suggestions_count']}")

    if result["suggestions_count"] > 0:
        print("\n๐ ุงูุชุฑุงุญุงุช ุชูุณูุน ุงููุนุฌู:")
        for word, suggestion in result["suggestions"].items():
            print_expansion_suggestion(suggestion, word)


def add_words_to_lexicon(processor):
    """ุฅุถุงูุฉ ูููุงุช ุฌุฏูุฏุฉ ุฅูู ุงููุนุฌู."""
    print("\n=== ุฅุถุงูุฉ ูููุงุช ุฌุฏูุฏุฉ ุฅูู ุงููุนุฌู ===")

    # ุฅุถุงูุฉ ูููุฉ ูุน ูุนูููุงุชูุง
    word_info = {
        "root": "ูุชุจ",
        "type": "noun",
        "pattern": "ููููุนูููุฉ",
        "meaning": "ููุงู ูุญูุธ ุงููุชุจ ูุงููุฑุงุกุฉ ูููุง",
        "source": "ุงููุนุฌู ุงููุณูุท",
    }

    success = processor.add_to_lexicon("ููุชุจุฉ", word_info, is_verified=True)
    if success:
        print(f"โ ุชูุช ุฅุถุงูุฉ ูููุฉ 'ููุชุจุฉ' ุจูุฌุงุญ.")
    else:
        print(f"โ ูุดูุช ุนูููุฉ ุฅุถุงูุฉ ูููุฉ 'ููุชุจุฉ'.")

    # ุงูุชุญูู ูู ุฅุถุงูุฉ ุงููููุฉ ุจูุฌุงุญ
    result = processor.process_word("ููุชุจุฉ")
    print_word_processing_result(result)


def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ ูููุซุงู."""
    # ูุณุงุฑ ููู ุงููุนุฌู
    lexicon_path = Path(__file__).parent.parent / "data" / "quran_lexicon_sample.json"

    # ุงูุชุญูู ูู ูุฌูุฏ ููู ุงููุนุฌู
    if not os.path.exists(lexicon_path):
        print(f"โ ููู ุงููุนุฌู ุบูุฑ ููุฌูุฏ ูู ุงููุณุงุฑ: {lexicon_path}")
        return

    # ุชููุฆุฉ ุงูุฎูุงุฑุฒููุงุช ุงููุทููุจุฉ
    root_extractor = ArabicRootExtractor()
    diacritics_processor = DiacriticsProcessor()
    morphology_analyzer = ArabicMorphologyAnalyzer(
        diacritics_processor=diacritics_processor, root_extractor=root_extractor
    )

    # ุชููุฆุฉ ุงููุนุงูุฌ ุงููุฌูู
    print(f"๐ ุฌุงุฑู ุชููุฆุฉ ุงููุนุงูุฌ ุงููุฌูู ุจุงุณุชุฎุฏุงู ุงููุนุฌู ูู: {lexicon_path}")
    processor = HybridProcessor(
        lexicon_path=lexicon_path,
        use_algorithms=True,
        morphology_analyzer=morphology_analyzer,
        root_extractor=root_extractor,
    )

    # ูุนุงูุฌุฉ ูููุงุช ูุฑุขููุฉ ูู ุงููุนุฌู
    process_quranic_words(processor)

    # ูุนุงูุฌุฉ ูููุงุช ุบูุฑ ูุฑุขููุฉ ุจุงุณุชุฎุฏุงู ุงูุฎูุงุฑุฒููุงุช
    process_non_quranic_words(processor)

    # ุงูุชุญูู ูู ุตุญุฉ ุงุณุชุฎุฑุงุฌ ุงูุฌุฐูุฑ
    verify_roots(processor)

    # ุฅุถุงูุฉ ูููุงุช ุฌุฏูุฏุฉ ุฅูู ุงููุนุฌู
    add_words_to_lexicon(processor)

    # ุชูุณูุน ุงููุนุฌู ุจุงุณุชุฎุฏุงู ุงูุฎูุงุฑุฒููุงุช
    expand_lexicon(processor)

    # ุญูุธ ุงููุนุฌู ุจุนุฏ ุงูุชุนุฏูู
    temp_output_path = Path(__file__).parent.parent / "data" / "temp_extended_lexicon.json"
    processor.save_lexicon(temp_output_path)
    print(f"\nโ ุชู ุญูุธ ุงููุนุฌู ุจุนุฏ ุงูุชุนุฏูู ูู: {temp_output_path}")

    print("\nโ ุชู ุชูููุฐ ุงููุซุงู ุจูุฌุงุญ.")


if __name__ == "__main__":
    main()
